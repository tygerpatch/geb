apply plugin: 'base'
apply plugin: 'idea'
apply from: "gradle/idea.gradle"

buildscript {
	repositories {
		mavenCentral()
	}
}

if (project.hasProperty("ci")) {
	allprojects {
		plugins.withType(ReportingBasePlugin) {
			reporting.baseDir = rootProject.file("$rootProject.buildDir/reports/$project.name")
		}
		tasks.withType(Test) {
			testLogging {
				exceptionFormat "full"
			}
		}
	}
}

allprojects { project ->
	version = '0.10.1-SNAPSHOT'
	group = 'org.gebish'
	
	ext {
		isSnapshot = version.endsWith("-SNAPSHOT")

		seleniumVersion = "2.43.1"
		groovyVersion = "2.3.6"
		spockVersion = "0.7-groovy-2.0"

		spockDependency = dependencies.create("org.spockframework:spock-core:$spockVersion") {
			exclude module: "groovy-all"
		}

		seleniumDependency = "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
		seleniumSupportDependency = "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
		firefoxDriverDependency = "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
		htmlUnitDriverDependency = "org.seleniumhq.selenium:selenium-htmlunit-driver:$seleniumVersion"

		jettyDependency = "org.mortbay.jetty:jetty:6.1.21"

		groovyDependency = "org.codehaus.groovy:groovy-all:$groovyVersion"

		repositories {
			mavenCentral()
			maven {
				name "java.net"
				url "http://download.java.net/maven/2"
			}
		}

		groovyModules = [
			":module:geb-core", ":internal:test-support",
			":module:geb-spock", ":module:geb-junit3", ":module:geb-junit4",
			":module:geb-testng", ":module:geb-implicit-assertions",
			":module:geb-ast", ":module:geb-waiting", ":integration:geb-gradle", ":doc:site"
		]

		publishedModules = [
			":module:geb-core", ":module:geb-implicit-assertions", ":module:geb-ast", ":module:geb-waiting",
			":module:geb-spock", ":module:geb-junit3", ":module:geb-junit4",
			":module:geb-testng", ":doc:manual", ":integration:geb-gradle"
		]

		publishedGroovyModules = groovyModules.findAll { it in publishedModules }
		apiGroovyModules = publishedGroovyModules - ":module:geb-implicit-assertions"

		grailsPluginModule = ":integration:geb-grails"
	}
}

tasks.create('codenarc')

subprojects {
	if (path in groovyModules) {
		apply plugin: "groovy"
		apply plugin: "idea"
		apply plugin: "codenarc"

		dependencies {
			compile groovyDependency
			codenarc 'org.codenarc:CodeNarc:0.21'
		}

		sourceCompatibility = 1.5
		targetCompatibility = 1.5

		tasks.withType(Test) {
			reports.junitXml.destination = reporting.file("test-results/$name")
			reports.html.destination = reporting.file("test-reports/$name")
			binResultsDir = file("$buildDir/test-results-bin/$name")

			ext.driver = project.properties["driver"] ?: "htmlunit"
			systemProperty 'geb.dev.driver', driver

			systemProperty 'geb.build.reportsDir', reporting.file("geb-reports/$name")
		}

		codenarc.configFile = rootProject.file('gradle/codenarc/rulesets.groovy')

		project.tasks.withType(CodeNarc) { codenarcSourceSetTask ->
			codenarcSourceSetTask.exclude 'GebConfig*.groovy'
			rootProject.tasks.codenarc.dependsOn codenarcSourceSetTask
			rootProject.allprojects {
				tasks.withType(Test) {
					mustRunAfter codenarcSourceSetTask
				}
			}
		}

	}

	if (path in publishedGroovyModules) {
		task sourcesJar(type: Jar) {
			classifier 'sources'
			from sourceSets.main.allSource
		}

		task javadocJar(type: Jar) {
			classifier 'javadoc'
			from groovydoc
		}

		artifacts {
			archives javadocJar, sourcesJar
		}
	}

	tasks.withType(Groovydoc) {
		exclude "**/internal/**"

		link "http://download.oracle.com/javase/6/docs/api/",
			"java.net",
			"java.util",
			"java.lang",
			"java.io"

		link "http://static.javadoc.io/org.seleniumhq.selenium/selenium-api/$seleniumVersion",
			"org.openqa.selenium"

		link "http://static.javadoc.io/org.spockframework/spock-core/$spockVersion",
			"spock.lang"

		link "http://junit.org/javadoc/4.11/",
			"org.junit"

		link "http://groovy.codehaus.org/api/",
			"groovy.lang"

		def docName = project.name == "manual" ? "Geb" : project.name
		docTitle = "Groovy API Documentation for $docName $version"
		footer = "<p style='text-align: center'>Groovy API Documentation for $docName $version - Licensed under the Apache License, Version 2.0 - <a href='http://www.gebish.org'>http://www.gebish.org</a></p>"
		windowTitle = "Groovy API for $docName $version"
	}
	
	if (path in publishedModules) {
		apply plugin: "base"
		apply plugin: "maven"
		apply plugin: "signing"

		signing {
			sign configurations.archives
			required { !isSnapshot && !project.hasProperty("ci") && gradle.taskGraph.hasTask(uploadArchives) }
		}
		
		apply from: "$rootDir/gradle/pom.gradle"
		
		if (path == ":doc:manual") {
			task("install", type: Upload, dependsOn: configurations.archives.allArtifacts.buildDependencies) {
				configuration = configurations.archives
				description = "Does a maven install of the archives artifacts into the local .m2 cache."
				repositories {
					mavenInstaller name: "mavenInstaller"
				}
			}
		}
		
		uploadArchives { task ->
			repositories.mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
				uniqueVersion = false
				gradle.taskGraph.whenReady { taskGraph ->
					if (taskGraph.hasTask(task)) {
						repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
							authentication(userName: sonatypeOssUsername, password: sonatypeOssPassword)
						}
						snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
							authentication(userName: sonatypeOssUsername, password: sonatypeOssPassword)
						}
					}
				}
			}

			task.onlyIf { isSnapshot || !project.hasProperty("ci") }
		}
	}
}

task release {
	dependsOn ':integration:geb-grails:publish',
		{ allprojects.findAll { it.path in publishedModules }*.uploadArchives }
}

task wrapper(type: Wrapper) {
	gradleVersion "1.7"
}

